public class QuickSort 
{
    // Function to perform Quick Sort
    public static void quickSort(int[] arr, int low, int high) 
    {
        if (low < high) 
        {
            // Partition index
            int pi = partition(arr, low, high);

            // Recursively sort elements before and after partition
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    // Partition function: places pivot in correct position
    private static int partition(int[] arr, int low, int high) 
    {
        int pivot = arr[high];  // Choosing last element as pivot
        int i = (low - 1);      // Index of smaller element

        for (int j = low; j < high; j++) 
        {
            // If current element is smaller than or equal to pivot
            if (arr[j] <= pivot) 
            {
                i++;

                // Swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // Swap arr[i+1] and arr[high] (pivot)
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1;
    }

    // Utility function to print array
    public static void printArray(int[] arr) 
    {
        for (int num : arr) 
        {
            System.out.print(num + " ");
        }
        System.out.println();
    }

    // Main method
    public static void main(String[] args) 
    {
        int[] numbers = {64, 34, 25, 12, 22, 11, 90};

        System.out.println("Original array:");
        printArray(numbers);

        quickSort(numbers, 0, numbers.length - 1);

        System.out.println("Sorted array:");
        printArray(numbers);
    }
}
